<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome</title>
    <url>/welcome/main/</url>
    <content><![CDATA[<p>主要是与技术相关。</p>
<p>还有自己的一些文章分享。</p>
]]></content>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/computer/algorithm/structure/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>数据结构</strong>即数据元素相互之间存在的一种或多种特定关系集合。用于组织、管理和存储数据，目的是提高数据操作的效率。</p>
<p>基本数据结构有：数组、栈、队列、链表、树、图、散列表（hash）、堆</p>
<p>从存储方式来看，数据结构的<strong>基本存储</strong>方式只有两种：数组（顺序存储）和链表（链式存储）。</p>
<span id="more"></span>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>一组相同类型的数据的集合，存储在连续的内存中。（对于一部分编程语言而言，数组的内存空间是固定的，如 C）</p>
<p>数组元素支持随机访问（索引）。但是数组元素的插入和删除相对复杂，需要对操作位置后的数组元素进行移动操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JS 增删</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">array.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>);  <span class="comment">// 在索引 2 位置添加元素 3， array [1, 2, 3, 4, 5]</span></span><br><span class="line">array.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>);     <span class="comment">// 从索引 1 开始删除两个元素， array [1, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>);  <span class="comment">// newArray 为 [3, 4, 5]，array 不变</span></span><br></pre></td></tr></table></figure>

<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>一种后进先出（LIFO）的数据结构，常用于表达式求值、历史记录等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JS 实现栈</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">array.<span class="title function_">push</span>(<span class="number">1</span>);  <span class="comment">//  [1, 2, 3]</span></span><br><span class="line">array.<span class="title function_">pop</span>();  <span class="comment">//  [1, 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>一种先进先出（FIFO）的数据结构，常用于消息队列、BFS 等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JS 实现队列</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">array.<span class="title function_">unshift</span>(<span class="number">1</span>);  <span class="comment">//  [1, 2, 3]</span></span><br><span class="line">array.<span class="title function_">shift</span>();  <span class="comment">//  [2, 3]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可以用链表实现栈或队列</p>
</blockquote>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>由节点组成的线性集合，每个节点包含数据和指向下一个节点的指针。</p>
<p>由于链表的节点通过指针连接，位置不一定连续，不存在数组的扩容问题，但不支持随机访问。</p>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>是一种层次结构，无环图，可以用链表来实现子节点之间的链接。</p>
<p>一般树的遍历可以用递归来实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">root: TreeNode</span>) &#123;</span><br><span class="line">    <span class="comment">// ... 前序遍历</span></span><br><span class="line">    <span class="title function_">traverse</span>(root.<span class="property">left</span>)</span><br><span class="line">    <span class="comment">// ... 中序遍历</span></span><br><span class="line">    <span class="title function_">traverse</span>(root.<span class="property">right</span>)</span><br><span class="line">    <span class="comment">// ... 后序遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>网络结构，节点间任意连接，树和链表都可以看作图的特例</p>
<p>图的遍历方式主要有两种：<strong>深度优先算法</strong>（DFS, Depth-First Search）和 <strong>广度优先算法</strong>（BFS, Breadth-First Search）。</p>
<p>深度优先算法（DFS）沿着图的某一路径尽可能深入下去，直到无法继续，然后回溯到上一个节点再继续搜索。<br>这种遍历方式使用栈来保存遍历路径，一般使用递归实现。用来查找图的连通分量、拓扑排序等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dfs</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (visited.<span class="title function_">has</span>(node)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    visited.<span class="title function_">add</span>(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... operation</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> neighbor <span class="keyword">of</span> node) &#123;</span><br><span class="line">        <span class="title function_">dfs</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>广度优先算（BFS）按层次遍历图，先访问起始节点，然后访问其所有邻居节点，再逐层向外扩展<br>一般用来寻找最短路径、层次遍历等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bfs</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bfs</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="keyword">let</span> queue=[node]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ... operation</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> neighbor <span class="keyword">of</span> node) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited.<span class="title function_">has</span>(neighbor)) &#123;</span><br><span class="line">                visited.<span class="title function_">add</span>(neighbor);</span><br><span class="line">                queue.<span class="title function_">push</span>(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>哈希表通过哈希函数将键映射到数组的索引，实现快速查找、插入和删除操作。</p>
<p>在 JavaScript 中，散列表（哈希表）可以通过 Object 或 Map 实现。</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是一种特殊的完全二叉树。二叉堆是一种完全二叉树，具有以下特点：</p>
<ul>
<li>每层节点从左到右依次填满，没有跳跃的空位。</li>
<li>除了最后一层，其他层都是满的。</li>
</ul>
<p>所以堆通常用数组来实现，二叉堆可以非常自然地映射到数组中，且数组实现可以有效利用内存空间，避免额外的指针开销。</p>
<h3 id="索引关系"><a href="#索引关系" class="headerlink" title="索引关系"></a>索引关系</h3><p>在数组中存储堆时，假设根节点在索引 0，则每个节点的索引位置满足以下关系：</p>
<ul>
<li>父节点索引为 i，则：<ul>
<li>左子节点索引为 2 * i + 1</li>
<li>右子节点索引为 2 * i + 2</li>
</ul>
</li>
<li>子节点索引为 i，则：<ul>
<li>父节点索引为 (i - 1) &#x2F; 2</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小顶堆</span></span><br><span class="line"><span class="comment">// 堆插入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapInsert</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    heap.<span class="title function_">push</span>(val)</span><br><span class="line">    <span class="keyword">let</span> idx=heap.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(idx&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> parent=<span class="title class_">Number</span>.<span class="built_in">parseInt</span>((idx-<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (heap[parent] &lt;= heap[idx]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        [heap[parent], heap[idx]] = [heap[idx], heap[parent]]</span><br><span class="line">        idx=parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆删除，只能删除最小值，即第一个值</span></span><br><span class="line"><span class="comment">// 先交换数组第一个和最后一个值，然后通过父子之间的比较、交换来获取极值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapDelete</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len=heap.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    [heap[<span class="number">0</span>], heap[len]] = [heap[len], heap[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">const</span> val=heap.<span class="title function_">pop</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">2</span>*idx+<span class="number">1</span>)&lt;len) &#123;</span><br><span class="line">        <span class="keyword">let</span> left=<span class="number">2</span>*idx+<span class="number">1</span>, right=<span class="number">2</span>*idx+<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (heap?.[left]&gt;=heap[idx] &amp;&amp; ((heap?.[right] ?? <span class="title class_">Infinity</span>)&gt;=heap[idx])) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> smallestIdx = heap[left] &lt; (heap?.[right] ?? -<span class="title class_">Infinity</span>) ? left : right;</span><br><span class="line">        [heap[smallestIdx], heap[idx]] = [heap[idx], heap[smallestIdx]];</span><br><span class="line">        idx=smallestIdx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>computer</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>《深入理解 React 技术栈》 - 笔记</title>
    <url>/js/frame/react-notes/</url>
    <content><![CDATA[<h3 id="W3C-的模板规范-Web-Components"><a href="#W3C-的模板规范-Web-Components" class="headerlink" title="W3C 的模板规范 Web Components"></a>W3C 的模板规范 Web Components</h3><p>REACT 的三种创建实例方法：</p>
<ol>
<li><code>React.createClass</code> 最古老，兼容性最好 <br></li>
<li>ES6 classes。<code>class xx extends Component&#123;...&#125;</code></li>
<li>无状态函数 <code>function xx()&#123;&#125;</code> 。在适合的情况下，都应该且必须使用无状态组件。无状态组件不像上述两种方法在调用时会创建新实例，它创建时始终保持了一个实例（没有生命周期方法，当然，Recompose 可以通过添加状态，生命周期方法，上下文等来增强函数组件），避免了不必要的检查和内存分配，做到了内部优化。<br>React 中，数据都是自顶向下单向流动的，即从父组件到子组件。通过 props 传递。组件的 props 可以传递节点。React 有一个重要的内置 prop —children，即组件的子组件集合。<br>React.cloneElement 用来克隆 ReactElement，返回一个新的元素。以下用法是等价的：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.cloneElement(</span><br><span class="line">  element,</span><br><span class="line">  props,</span><br><span class="line">  children</span><br><span class="line">);</span><br><span class="line">&lt;element.type &#123;...element.props&#125; &#123;...props&#125;&gt;&#123;children&#125;&lt;/element.type&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="React-组件差别"><a href="#React-组件差别" class="headerlink" title="React 组件差别"></a>React 组件差别</h3><table>
<thead>
<tr>
<th align="left">nextElement</th>
<th align="center">实际参数</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">null&#x2F;false</td>
<td align="center">空</td>
<td align="center">创建 ReactDOMEmptyComponent 组件</td>
</tr>
<tr>
<td align="left">object &amp;&amp; type &#x3D;&#x3D;&#x3D; string</td>
<td align="center">虚拟 DOM</td>
<td align="center">创建 ReactDOMComponent 组件</td>
</tr>
<tr>
<td align="left">object &amp;&amp; type !&#x3D;&#x3D; string</td>
<td align="center">React 组件</td>
<td align="center">创建 ReactCompositeComponent 组件</td>
</tr>
<tr>
<td align="left">string&#x2F;number</td>
<td align="center">字符串&#x2F;数字</td>
<td align="center">创建 ReactDOMTextComponent 组件</td>
</tr>
</tbody></table>
<p>因为 dom 元素同样没有生命周期，ReactDOMComponent 会对传入的 div，span 等标签通过 switch 进行识别和处理，除此之外流程与 ReactDOMEmptyComponent ，ReactDOMTextComponent 基本相同。</p>
<p>ReactDOM：React 适用于移动端和 web 端，ReactDOM 就是 React 为了操作 web 端的方法。ReactDOM 的 API 非常少，只有 findDOMNode、unmountComponentAtNode 和 render。ReactDOM.render ：很重要，把 React 渲染的 Virtual DOM 渲染到浏览器的 DOM。<br>React 中对于 DOM 操作，不仅可以使用 findDOMNode 获得该组件 DOM，还可以使用 refs 获得组件内部的 DOM 结构。（refs 会指向一个组件类的实例，所以可以调用该类定义的任何方法。直接查找 DOM 都是不推荐的）<br>不过，仍然有一些 DOM 操作是 React 无法避免或者正在努力避免的。比如，如果要调用 HTML5 Audio&#x2F;Video 的 play 方法和 input 的 focus 方法， React 只能使用相应的 DOM 方法来实现。<br>React 提供了事件绑定的功能，但是仍然有一些特殊情况需要自行绑定事件，例如 Popup 等 组件，当点击组件其他区域时可以收缩此类组件。这要求对组件以外的区域(一般指 document 和 body)进行事件绑定。<br>React 中使用 DOM 最多的还是计算 DOM 的尺寸(即位置信息)。</p>
<h3 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h3><p>Virtual DOM 实际上是在浏览器端用 JavaScript 实现的一套 DOM API，它之于 React 就好似一个虚拟空间，包括一整套 Virtual DOM 模型、生命周期的维护和管理、性能高效的 diff 算法和 将 Virtual DOM 展示为原生 DOM 的 Patch 方法等。（新代码的 virtual dom 概念没有了，换成了 fiber，所有的 diff 操作都是基于 fiber 的。不过基本原理还是类似的）<br>Virtual DOM 中的节点称为 ReactNode，它分为 3 种类型 ReactElement、ReactFragment 和 ReactText。</p>
<h4 id="React-diff"><a href="#React-diff" class="headerlink" title="React diff"></a>React diff</h4><p>React diff 算法的 3 个策略。</p>
<ul>
<li>策略一: Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li>
<li>策略二: 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li>
<li>策略三: 对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</li>
</ul>
<h3 id="React-中的事件"><a href="#React-中的事件" class="headerlink" title="React 中的事件"></a>React 中的事件</h3><p>React 基于 Virtual DOM 实现了一个 SyntheticEvent （合成事件，react 为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在 jsx 中常见的 onClick、onChange 这些都是合成事件）层，开发所定义的事件处理器会接收到一个 SyntheticEvent 对象的实例。所有事件都自动绑定到最外层上。如果需要访问原生事件对象，可以使用 nativeEvent 属性。<br>在 React 底层，主要对合成事件做了两件事：<strong>事件委派和自动绑定</strong>。<br>一、事件委派<br>在使用 React 事件前，一定要熟悉它的事件代理机制。它并不会把事件处理函数直接绑定到真实的节点上，而是把所有事件绑定到结构的最外层，使用一个统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。当组件挂载或卸载时，只是在这个统一的事件监听器上插入或删除一些对象；当事件发生时，首先被这个统一的事件监听器处理，然后在映射里找到真正的事件处理函数并调用。这样做简化了事件处理和回收机制，效率也有很大提升。<br>二、自动绑定<br>在 React 组件中，每个方法的上下文都会指向该组件的实例，即自动绑定 this 为当前组件。 而且 React 还会对这种引用进行缓存，以达到 CPU 和内存的最优化。在使用 ES6 classes 或者纯 函数时，这种自动绑定就不复存在了，需要手动实现 this 的绑定。</p>
<ul>
<li>bind 方法。this.func.bind(this, …args)</li>
<li>构造器内声明</li>
<li>箭头函数<br>值得注意的是，在 React 中使用 DOM 原生事件时，一定要在组件卸载时手动移除，否则很可能出现内存泄漏的问题。而使用合成事件系统时则不需要，因为 React 内部已经帮开发者妥善地处理了。<br>React 合成事件系统的委托机制，在合成事件内部仅仅对最外层的容器进行了绑定，并且依赖事件的冒泡机制完成了委派。<br>用 reactEvent.nativeEvent. stopPropagation() 来阻止冒泡是不行的。阻止 React 事件冒泡的行为只能用于 React 合成事件系统中，且没办法阻止原生事件的冒泡。反之，在原生事件中的阻止冒泡行为，却可以阻止 React 合成事件的传播。<br>实际上，React 的合成事件系统只是原生 DOM 事件系统的一个子集。它仅仅实现了 DOM Level 3 的事件接口，并且统一了浏览器间的兼容问题。有些事件 React 并没有实现，或者受某些限制没办法去实现，比如 window 的 resize 事件。</li>
</ul>
<p>input， select 等一些 DOM 结构在 React 被称为 <strong>受控组件</strong>。 React 受控组件更新 state 的流程：<br>(1) 可以通过在初始 state 中设置表单的默认值。<br>(2) 每当表单的值发生变化时，调用 onChange 事件处理器。<br>(3) 事件处理器通过合成事件对象 e 拿到改变后的状态，并更新应用的 state。<br>(4) setState 触发视图的重新渲染，完成表单组件值的更新。</p>
<h4 id="React-间的组件通信"><a href="#React-间的组件通信" class="headerlink" title="React 间的组件通信"></a>React 间的组件通信</h4><ul>
<li>父组件向子组件通信：使用 props 属性</li>
<li>子组件向父组件通信：回调函数方法</li>
<li>有嵌套关系的跨级组件通信：向更高级别的组件层层传递 props（不建议，略显冗余）。<br>在 React 中，我们可以使用 context 来实现跨级父子组件间的通信。不过 React 官方并不建议大量使用 context，因为尽管它可以减少逐层传递，但当组件结构复杂的时候，我们并不知道 context 是从哪里传过来的。总体的原则是如果我们真的需要 context，那么建议写成高阶组件来实现。</li>
<li>无嵌套关系的组件通信：自定义事件。处理事件的过程中需要注意，在 componentDidMount 事件中，如果组件挂载完成，再订阅事件;当组件卸载的时候，在 componentWillUnmount 事件中取消事件的订阅。</li>
</ul>
<h3 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h3><p>React 生命周期：挂载、渲染、卸载。无状态组件挂载时只是方法调用，没有新建实例。</p>
<ul>
<li>mounted（实例化）: React Components 被 render 解析生成对应的 DOM 节点并被插入浏览器的 DOM 结构这一过程。<br>getDefaultProps -&gt; getInitialState() -&gt; getDerivedStateFromProps (componentWillMount 删除) -&gt; render -&gt; componentDidMount</li>
<li>updated（存在期）:一个 mounted 的 React Components 被重新 render 的过程：setState() or setProps()<br>getDerivedStateFromProps ( componentWinllReceiveProps 删除 ) -&gt; shouldComponentUpdate &lt;-&gt; (componentWillUpdate -&gt; 删除 ) render -&gt; getSnapshotBeforeUpdate (新增) -&gt; componentDidUpdate</li>
<li>unmounted（销毁&amp;清理）: 一个 mounted 的 React Components 对应的 DOM 节点被从 DOM 结构中移除的过程。<br>componentWillUnmount</li>
</ul>
<h3 id="React-中的-CSS-Modules"><a href="#React-中的-CSS-Modules" class="headerlink" title="React 中的 CSS Modules"></a>React 中的 CSS Modules</h3><ul>
<li>所有样式都是局部化的，解决了命名冲突和全局污染问题;</li>
<li>class 名的生成规则配置灵活，可以以此来压缩 class 名;</li>
<li>只需引用组件的 JavaScript，就能搞定组件所有的 JavaScript 和 CSS;<br>CSS Modules 是使用 composes 来组合样式；<br>CSS Modules 的命名规范是从 BEM 扩展而来的。BEM 把样式名分为 3 个级别，具体如下<br>所示。</li>
<li>Block:对应模块名，如 Dialog。</li>
<li>Element:对应模块中的节点名 Confirm Button。</li>
<li>Modifier:对应节点相关的状态，如 disabled 和 highlight。<br>BEM 最终得到的 class 名为 dialog**confirm-button–highlight。使用双符号 ** 和 – 是为了与区块内单词间的分隔符区分开来。<br>CSS Modules 是对现有的 CSS 做减法。为了追求简单可控，作者建议遵循如下原则:</li>
<li>不使用选择器，只使用 class 名来定义样式;</li>
<li>不层叠多个 class，只使用一个 class 把所有样式定义好;</li>
<li>所有样式通过 composes 组合来实现复用;</li>
<li>不嵌套。<br>由于多数 CSS 项目存在深厚的历史遗留问题，过多的限制就意味着增加迁移成本和与外部合作的成本。<br>在 CSS Modules 中，外部覆盖局部样式，可以通过给组件关键节点加上 data-role 属性，然后通过 属性选择器来覆盖样式。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[data-role=&quot;xxx&quot;] &#123;</span><br><span class="line">  // override style</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进一步，可以了解 <a href="https://github.com/gajus/react-css-modules">react-css-modules</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>JavaScript</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Taro 使用过程中遇到的坑</title>
    <url>/js/frame/taro-bugs/</url>
    <content><![CDATA[<h3 id="Taro-简介"><a href="#Taro-简介" class="headerlink" title="Taro 简介"></a>Taro 简介</h3><p>Taro 是京东凹凸实验室的多端统一开发框架，语法类似 React，生成能运行在微信&#x2F;百度&#x2F;字节跳动&#x2F;支付宝&#x2F; QQ 小程序、快应用、 H5 、 React Native 等平台的应用。<br>产品需求是同时支持 h5 和 小程序访问，考虑到维护和开发效率的问题，决定选择支持多端的开发框架，比较了下目前开源的一些框架，选择了最为可靠的 Taro 。是大平台的开源框架，有较稳定的维护支持；语法与 React 相似，团队学习成本较小；社区最为活跃，修复 BUG 速度快。</p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><span id="more"></span>

<p>京东高级前端开发工程师程帅老师说，前端开发框架的本质，当前所有流行的前端框架，抛开使用和实现层面的差异，以及一系列兼容性和性能优化层面的考虑，最终都要回归到 DOM 的操作上。也就是说，只要能够在小程序实现框架所需的 DOM&#x2F;BOM 的 API ，那就能够将这些前端框架运行在小程序上。而各端小程序处于安全等层面的考虑，都没有把 DOM&#x2F;BOM API 暴露出来，从而导致各种前端框架无法直接在小程序上运行。<br>Taro 就是给基于小程序的运行时实现了一套 DOM&#x2F;BOM 的 API，并将这一套 API 和小程序的渲染机制结合起来，从而实现了将各种语法的前端框架运行在小程序上。</p>
<h3 id="微信小程序的坑"><a href="#微信小程序的坑" class="headerlink" title="微信小程序的坑"></a>微信小程序的坑</h3><p>小程序跟 h5 还是有挺大的不同的。Taro 即使号称是统一框架，有些地方也需要特别的处理。</p>
<h4 id="Taro-CSS-样式不支持伪元素和伪类"><a href="#Taro-CSS-样式不支持伪元素和伪类" class="headerlink" title="Taro CSS 样式不支持伪元素和伪类"></a>Taro CSS 样式不支持伪元素和伪类</h4><p>微信小程序是支持伪元素和伪类的，但 Taro 中是不支持的。当然，如果写了 H5 中是生效的。</p>
<h4 id="各组件-CSS-共用问题"><a href="#各组件-CSS-共用问题" class="headerlink" title="各组件 CSS 共用问题"></a>各组件 CSS 共用问题</h4><p>微信小程序默认组件 CSS 相互独立，所以只能通过增加 props 控制 className 的方式来改变在不同组件中的样式。</p>
<h4 id="组件销毁问题"><a href="#组件销毁问题" class="headerlink" title="组件销毁问题"></a>组件销毁问题</h4><p>子组件的阶段 componentUnmont 无效，如果有类似 window.listener 之类的需要销毁，只有页面级 componentDidHide 实现</p>
<h4 id="小程序内嵌-WebView-通信问题"><a href="#小程序内嵌-WebView-通信问题" class="headerlink" title="小程序内嵌 WebView 通信问题"></a>小程序内嵌 WebView 通信问题</h4><p><strong>大坑！</strong></p>
<ol>
<li>小程序的 WebView 只能在特定时机（小程序后退、组件销毁、分享）才能拿到消息</li>
<li>小程序使用 WebView 的外链都得注册，且得写入特定的小程序安全代码（确实安全多了…<br>如果某些操作只能使用 WebView 完成，如支付之类的，建议引导去浏览器或者。类似俄罗斯套娃，先套一个本站的页面，再套一个外部页面，完成操作后后退…</li>
</ol>
<h3 id="JS-的坑"><a href="#JS-的坑" class="headerlink" title="JS 的坑"></a>JS 的坑</h3><h4 id="JS-浮点数运算问题"><a href="#JS-浮点数运算问题" class="headerlink" title="JS 浮点数运算问题"></a>JS 浮点数运算问题</h4><p>JS 存储浮点数机制: 采用的是 IEEE 754 定义的 64 位双精度浮点型来表示。在浮点数运算时，由于计算机无法准确表示大部分小数，而导致精度问题。</p>
<ol>
<li>先对运算的数据全部取整，再通过挪小数点来复原。（这个对乘法运算比较适用）</li>
<li>* 1000 -&gt; 运算 -&gt; &#x2F; 1000。（注意，这个方法，如果小数较多时也会出现计算差错。）</li>
<li>Math 库。（终极方案）</li>
</ol>
<h4 id="fetch-异步请求中断问题"><a href="#fetch-异步请求中断问题" class="headerlink" title="fetch 异步请求中断问题"></a>fetch 异步请求中断问题</h4><p>fetch 没有 abort 方法。所以无法中断请求。<br>可以用 promise.race ，将所有请求加入 promise 数组，待某一个返回后，“抛弃”其余请求。</p>
<h4 id="fetch-请求-cookie-问题"><a href="#fetch-请求-cookie-问题" class="headerlink" title="fetch 请求 cookie 问题"></a>fetch 请求 cookie 问题</h4><p>Taro 内置的是 fetch 请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">By default, fetch won&#x27;t send or receive any cookies from the server, resulting in unauthenticated requests if the site relies on maintaining a user session (to send cookies, the credentials init option must be set).</span><br><span class="line">Since Aug 25, 2017. The spec changed the default credentials policy to same-origin. Firefox changed since 61.0b13.</span><br></pre></td></tr></table></figure>

<p>而 fetch 默认是不会携带 cookie，服务器返回的也不会自动写入，得配置 credentials，无关跨域与否，也无关 get 、 post 方法。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Taro</tag>
      </tags>
  </entry>
  <entry>
    <title>基础类算法</title>
    <url>/computer/algorithm/base/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>算法是编程的核心。算法是指解决特定问题的一系列明确的指令步骤。</p>
<span id="more"></span>

<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p>排序算法是将一组数据序列按照一定的规则（如 从小到大）进行重新排列的算法。</p>
<p>常见的排序算法有：</p>
<p>1.冒泡排序 (Bubble Sort)<br>通过重复比较相邻的元素，如果顺序错误就交换位置，从而让较大的元素逐渐“冒泡”到序列的尾部。时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，适用于小规模数据的排序。</p>
<p>2.选择排序 (Selection Sort)<br>每次从未排序的部分中选出最小的元素，放到已排序部分的末尾。时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，不稳定，适用于小规模数据。</p>
<p>3.插入排序 (Insertion Sort)<br>将每个元素插入到已排序部分的适当位置。时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，但在数据量小或部分有序的情况下效率较高。</p>
<p>4.归并排序 (Merge Sort)<br>采用分治法，将序列分成两个子序列，分别排序后合并。时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.847ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4352.3 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(1918.7,0)"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(3196.7,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3363.3,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(3963.3,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，是稳定排序算法。</p>
<p>5.快速排序 (Quick Sort)<br>通过选择一个“基准”元素，将序列分成两部分，一部分小于基准，一部分大于基准，然后递归排序。平均时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.847ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4352.3 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(1918.7,0)"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(3196.7,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3363.3,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(3963.3,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，不稳定。</p>
<p>6.希尔排序 (Shell Sort)<br>基于插入排序，通过分组和逐步缩小间隔来减少元素的移动次数。时间复杂度因实现而异，通常在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.076ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 3127.7 1083.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(500,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(778,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(2738.7,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container> 左右。</p>
<p>7.堆排序 (Heap Sort)<br>利用堆这种数据结构，将序列构建成一个最大堆，每次取出堆顶元素（最大值）并调整堆结构。时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，不稳定。</p>
<p>8.计数排序 (Counting Sort)<br>适用于已知数据范围的整数排序，通过统计元素出现次数来确定其位置。时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.788ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3884.4 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1974.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(2974.4,0)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(3495.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，稳定。</p>
<p>9.基数排序 (Radix Sort)<br>将每个数字按位（从低位到高位）进行排序，适合整数排序。时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.491ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6404.9 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mo" transform="translate(1894.2,0)"><use data-c="D7" xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="mo" transform="translate(2894.4,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3283.4,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(4105.7,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(5105.9,0)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(5626.9,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(6015.9,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，其中 是位数。</p>
<p>10.桶排序 (Bucket Sort)<br>将元素分布到多个桶中，每个桶内排序，然后合并桶。时间复杂度平均为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1752,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，适用于数据分布均匀的情况。</p>
<h3 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h3><p>字符串匹配是指在一段文本串 s 查找特定子串 pattern 的位置。假设 m 是模式串长度，n 是文本串长度。</p>
<p>1.暴力匹配算法（Brute Force &#x2F; BF 算法）<br>从文本的第一个字符开始，将模式串依次与文本串的每个子串进行比较。若不匹配则移动一个字符继续比较。时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.596ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4241.4 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1974.2,0)"><use data-c="D7" xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="mi" transform="translate(2974.4,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3852.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></p>
<p>2.RK 算法（Rabin-Karp 算法）<br>使用哈希函数计算模式串和文本子串的哈希值，将哈希值相同的子串视为可能匹配。若哈希值相同，再进行精确匹配验证。<br>时间复杂度平均为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.596ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4241.4 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1974.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(2974.4,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3852.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，最坏情况为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.596ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4241.4 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1974.2,0)"><use data-c="D7" xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="mi" transform="translate(2974.4,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3852.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></p>
<p>3.BM 算法（Boyer-Moore 算法）<br>从模式串的末尾字符开始进行比较，若不匹配则利用坏字符规则和好后缀规则进行跳跃，从而跳过尽量多的字符。<br>时间复杂度一般为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.962ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3519 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1752,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-1-TEX-N-2F"></use></g></g><g data-mml-node="mi" transform="translate(2252,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3130,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，最坏情况为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.596ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4241.4 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1974.2,0)"><use data-c="D7" xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="mi" transform="translate(2974.4,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3852.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></p>
<p>4.KMP 算法（Knuth-Morris-Pratt 算法）<br>通过部分匹配表（next 数组）来避免重复比较。模式串在匹配失败时，根据前缀与后缀的匹配信息跳过部分字符，从而提高查找效率。<br>时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.596ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4241.4 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1974.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(2974.4,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3852.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></p>
<h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>二分法是最常见的算法之一。要求数组元素已按升序或降序排列。每次迭代能将搜索范围缩小一半，时间复杂度为 𝑂(log 𝑛)，相较于线性查找的 𝑂(𝑛)，效率更高。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = arr.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 注意 [left, right] 的区间，这里是包含</span></span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// 找到目标值，返回索引</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left=mid+<span class="number">1</span>; <span class="comment">// 目标在右半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right=mid-<span class="number">1</span>; <span class="comment">// 目标在左半部分</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 目标值不存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>computer</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 使用过程中遇到的坑</title>
    <url>/js/frame/vue/</url>
    <content><![CDATA[<h3 id="DOM-使用"><a href="#DOM-使用" class="headerlink" title="DOM 使用"></a>DOM 使用</h3><h4 id="同一个组件中两个-form-表单相互影响"><a href="#同一个组件中两个-form-表单相互影响" class="headerlink" title="同一个组件中两个 form 表单相互影响"></a>同一个组件中两个 form 表单相互影响</h4><p>问题描述：同一个组件中，两个 v-if 的 form 表单，共享某个检验规则，prop 值不同，但其中一个的规则检验提示也会在另一个表单显示。<br>解决：给两个表单分别加 key 值。<br>原因：没有这个属性的时候， Vue 应用 in-place patch（就地复用）策略。一般的作用在列表里的顺序发生改变的时候，比如 shuffle（列表打乱）的时候，Vue 为了提升性能，不会移动 dom 元素，只是更新相应元素的内容节点。<br>而在 v-if 中，切换 DOM 结构时也可以用来打破复用。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>web</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 使用</title>
    <url>/js/frame/webpack/</url>
    <content><![CDATA[<h3 id="wepback"><a href="#wepback" class="headerlink" title="wepback"></a>wepback</h3><h4 id="webpack-原理"><a href="#webpack-原理" class="headerlink" title="webpack 原理"></a>webpack 原理</h4><p>推荐一个通俗易懂的入门视频：<br><a href="https://www.youtube.com/watch?v=Gc9-7PBqOC8&list=LLHK1mTHpwrUeYgF5gu-Kd4g">Build Your Own Webpack</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>《雪域求法记》 - 书评</title>
    <url>/impression/literature/xueyu/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为要去藏地旅游，打算简单了解一下西藏的地理人文，看到有人推荐《雪域求法记——一个汉人喇嘛的口述史》这本书。</p>
<blockquote>
<p>口述者邢肃芝是一位20世纪上半叶中国大动荡年代中亲身参与了汉藏两地错综复杂的历史演变的枢纽式人物。他生于民国时期，少时出家，在中原多地辗转学佛；在抗战时期，由川藏线进藏学习佛法，取得了藏传佛教最高学位–拉然巴格西。45年抗战胜利后，他返回中原并还俗，后又受民国政府委派办拉萨小学。50年中原解放，西藏喇嘛政府驱逐汉人，邢肃芝从西藏由印度退返香港，后又去美国定居。</p>
</blockquote>
<span id="more"></span>

<h3 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h3><p>这本书大致介绍了口述者在 1950年 前的人生。<br>其少时出家，从小便受各寺院住持赏识，通习佛法。读者能够从中窥见民国时期，长江一带地区宗教的一些情况。在各地学佛时，他认识了几位藏地高僧，由此萌生了入藏求佛法的想法。也是自比向往大唐时玄奘求法的往事。<br>详述了入藏和求学过程中，他碰到的人、经历的曲折风霜、看到的风土人情等；入藏后，除了入寺拜师学习佛法，他还四处探访藏地各地贵族和藏传佛教圣地，也详述了这些人物、经历，也描绘了一些底层劳苦藏民的艰难生活片段。<br>因为口述者是民国时期人，语言夹着文言。记述很详细，口述者观察得很仔细，能够从其描述中，了解民国时期藏地的风俗人情、政治、宗教、地理等状况。而口述者作为一位亲自进入拉萨三大寺学习的僧人，对藏传佛教诸多细节描述，非常生动，如同亲临。</p>
<p>同时也要看到，口述者对佛法过溢，中间对僧人部分行为有很多隐言，需要读者甄别。而且口述者以汉僧身份进藏，却得到诸多民国政府高层的帮助，此间目的，难免让人揣测；口述者驻藏时间不长不短，除去学习佛法，还四处走访藏地考察，确实精力充沛。</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>吐蕃七世纪在青藏高原崛起，此后汉藏两地人员往来密切；元时设立宣政院，象征着中央政府对西藏地区的正式掌控；清朝通过金瓶掣签、驻藏大臣等手段，对西藏地区形成了较为完善的管理体系。</p>
<p>然而，19 世纪中期以后，清朝日渐衰落，对藏区管控越发松垮。而北方俄国、南方英国（印度方向）都对西藏虎视眈眈。俄国蚕食新疆，妄图通过控制青海地区进而控制西藏，居高临下俯瞰亚洲；英国蚕食藏地边缘，妄图将西藏地区独立为缓冲区，由此保证“大英帝国的明珠”不受威胁。而西藏喇嘛政府腐败堕落，勾结外国，意图脱离中央政府。</p>
<p>俄国在 19 世纪便派遣俄籍蒙古僧人入藏，以求佛法之名，影响喇嘛政府对俄外交倾向。英国深感威胁，终于在 20 世纪初，趁日俄战争中俄国被日本大败的时机，出兵入侵西藏，喇嘛政府逃亡。清末赵尓丰率川军入藏平乱，驱赶英军，重建中央政府权威。<br>在 1911 年辛亥革命后清政府倒台，赵尓丰也被革命党人治罪格杀。而遗留在藏的川军纪律松弛，被藏人驱赶出藏。随后喇嘛政府在英军帮助下又回西藏主政。此后，民国政府一直都在寻求机会重新与西藏地区联结，但由于领袖无能、时局动荡等原因，政府层面的正式接触都比较困难，断断续续。邢肃芝便在此期间，以汉地佛教徒的身份，以“求佛法”为由，进入藏地。<br>1945 年后，中国抗战胜利，民国政府成立蒙藏委员会，派遣中央官员入藏，西藏喇嘛政府听调不听宣。邢肃芝已返回家乡，并返俗娶亲，再以筹建拉萨小学的名义再次进藏。而拉萨小学的全部资源支持，皆由中央政府提供。<br>1949 年，中国人民共和国成立。民国政府在西藏的官方组织、民间组织皆被西藏喇嘛政府驱逐，邢肃芝借道印度去往香港。1951 年，解放军入藏，西藏解放。</p>
<p>喇嘛政府政教合一，崇尚佛教，民国政府以僧人作为联结点，成为汉藏地区一种切实有效的沟通方式。民国政府高层大多贪权恶劳，难以深耕藏地，秉持“中央思想”自视过大，难以与藏人打成一片；而像邢肃芝等宗教人士能深入理解藏人、喇嘛政府的习俗，从而采用恰当的沟通方式，确实在一定程度上促进双方了解和联系。</p>
<p><em>参考：《民国政府的西藏专使（1912-1949）》- 朱丽双</em></p>
]]></content>
      <categories>
        <category>读后感</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>彷《城东早春》-杨巨源</title>
    <url>/article/literature/Xiangshan/</url>
    <content><![CDATA[<h3 id="《京城深秋》"><a href="#《京城深秋》" class="headerlink" title="《京城深秋》"></a>《京城深秋》</h3><p>京城盛景在深秋<br>梧桐已落半稀疏<br>若待香山红似火<br>出门俱是登山人</p>
]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title>鸿蒙系统开发语言</title>
    <url>/programming/programmingLanguage/javascript/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2024年10月22日，华为正式发布了 HarmonyOS NEXT（版本号 5.0，又名鸿蒙星河版）。HarmonyOS NEXT 使用自主设计的鸿蒙微内核，仅支持鸿蒙系统的原生应用程序。</p>
<p>ArkTS 是鸿蒙生态的应用开发语言，基于 TypeScript 作为超集（而 TypeScript 是 JavaScript 的超集），进一步规范强化静态检查和分析，同时，提供了声明式 UI 范式、状态管理支持等相应的能力。</p>
<span id="more"></span>


<h3 id="那为什么众多新兴编程语言会选择-JS-做为基础？"><a href="#那为什么众多新兴编程语言会选择-JS-做为基础？" class="headerlink" title="那为什么众多新兴编程语言会选择 JS 做为基础？"></a>那为什么众多新兴编程语言会选择 JS 做为基础？</h3><p>可能有以下原因</p>
<ul>
<li><p><strong>拥有广泛的开发者基础</strong>：JavaScript 是全世界最受欢迎的编程语言之一，拥有大量的开发者和丰富的生态系统。如 Web 前端、后端（Node.js）、桌面应用开发（Electron）等。这为新语言带来了大量潜在的用户群体，也降低了开发者的学习成本。</p>
</li>
<li><p><strong>学习曲线较低</strong>：相比很多底层语言，JavaScript 的语法简单明了，在开发体验上更加直观友好。</p>
</li>
<li><p><strong>实时响应</strong>：JavaScript 的事件驱动和异步编程模型，非常适合需要实时交互的应用场景（即 I&#x2F;O 密集型应用 ）。如果将 APP 视为一整个浏览器应用，开发者可以无缝衔接到新开发中。</p>
</li>
</ul>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>浅比较一下三个开发平台，ArkTS、 Kotlin、 Swift 的开发差别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ArkTS - 声明式 UI 组件</span></span><br><span class="line">@<span class="title class_">Component</span></span><br><span class="line">struct <span class="title class_">Counter</span> &#123;</span><br><span class="line">    @<span class="title class_">State</span> <span class="attr">count</span>: number = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Column</span>() &#123;</span><br><span class="line">            <span class="title class_">Text</span>(<span class="string">`计数: <span class="subst">$&#123;<span class="variable language_">this</span>.count&#125;</span>`</span>)</span><br><span class="line">                .<span class="title function_">fontSize</span>(<span class="number">20</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="title class_">Button</span>(<span class="string">&quot;增加&quot;</span>)</span><br><span class="line">                .<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ArkTS 采用声明式语法，使用装饰器(@Component, @State)管理组件和状态。<br>语法简单直观，但是这是有代价的。增加了一层框架抽象层（即在原生系统 API 和开发者代码之间增加的中间层），运行时需要 JS 引擎解释执行，性能会有一定损耗。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Kotlin - Android UI示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : AppCompatActivity() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">var</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    override fun <span class="title function_">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        </span><br><span class="line">        findViewById&lt;Button&gt;(R.id.incrementButton).setOnClickListener &#123;</span><br><span class="line">            count++</span><br><span class="line">            findViewById&lt;TextView&gt;(R.id.counterText).text = <span class="string">&quot;计数: $count&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &lt;!-- 显示计数的 TextView --&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/counterText&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Count: 0&quot;</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &lt;!-- 增加计数的 Button --&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/increaseButton&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;增加&quot;</span> /&gt;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<p>虽然 Kotlin 允许使用代码来创建 UI（通过 Jetpack Compose），XML 仍然有其存在的必要性</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Swift - iOS UI</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_ inherited__">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> counterLabel <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> button <span class="operator">=</span> <span class="type">UIButton</span>(type: .system)</span><br><span class="line">        button.setTitle(<span class="string">&quot;增加&quot;</span>, for: .normal)</span><br><span class="line">        button.addTarget(<span class="keyword">self</span>, action: <span class="keyword">#selector</span>(incrementCount), for: .touchUpInside)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可选类型示例</span></span><br><span class="line">        <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> unwrappedName <span class="operator">=</span> name &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hello, <span class="subst">\(unwrappedName)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">incrementCount</span>() &#123;</span><br><span class="line">        count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        counterLabel.text <span class="operator">=</span> <span class="string">&quot;计数: <span class="subst">\(count)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ArkTS 和 Swift 都不支持类似 XML 的模板语言（像在 Android 开发中使用的 XML 布局）。<br>随着声明式 UI 构建方式的兴起，传统的 XML 模板语言的局限性逐渐显现，它们更加倾向于使用代码来管理 UI 和逻辑，从而提升开发效率、可维护性和性能。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>从 web 前端开发者的角度来看，ArkTS 显然充分考虑了当前热门的前端开发语言的优缺点、HarmonyOS 系统初诞生的生态构建的门槛等因素，从而选择了入门更为友好的 JavaScript 作为基础。</p>
<p>Kotlin 是一个强大的跨平台开发语言，特别适合 Android 开发和跨平台项目，适合需要多平台支持的开发者。ArkTS 和 Swift 都较为封闭。</p>
<p>从代码角度看，语言需要能提供支持模块化、高内聚和低耦合的功能。ArkTS 和 Kotlin 都提供了强大的函数式编程支持；而 ArkTS 也具备强大的面向对象编程能力。</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>programming</tag>
      </tags>
  </entry>
  <entry>
    <title>从 requestAnimationFrame 看 JS Event Loop</title>
    <url>/js/web/evetTask/</url>
    <content><![CDATA[<h3 id="什么是-Event-Loop？"><a href="#什么是-Event-Loop？" class="headerlink" title="什么是 Event Loop？"></a>什么是 Event Loop？</h3><p>JavaScript 的 Event Loop 主要是指执行环境（如浏览器或 Node.js）中处理事件和异步回调的机制。<br>Event Loop 是一个持续运行的循环，负责执行代码、收集和处理事件以及执行队列中的子任务。 - from MDN</p>
<blockquote>
<p>JavaScript has a runtime model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. </p>
</blockquote>
<span id="more"></span>

<h3 id="Event-Loop-执行机制"><a href="#Event-Loop-执行机制" class="headerlink" title="Event Loop 执行机制"></a>Event Loop 执行机制</h3><p>JavaScript 是单线程语言，会使用一个调用栈（Call Stack）来管理执行中的函数。<br>当一个函数被调用时，它会被压入栈中，执行完成后，函数会被从栈中弹出。如果栈为空，事件循环会检查是否有待处理的事件。</p>
<p>事件（如I&#x2F;O 操作、定时器、UI rendering、异步等）会被放入一个消息队列。这些事件会按照<strong>某种顺序</strong>排队等待执行。</p>
<p>HTML 规范中定义：</p>
<blockquote>
<p>An event loop has one or more task queues. A task queue is a set of tasks.</p>
</blockquote>
<p>事件循环的顺序：</p>
<ol>
<li>执行栈（Call Stack）为空。</li>
<li>检查并执行<strong>所有微任务队列</strong>中的任务。</li>
<li>如果有 task，将一个 task 从消息队列中取出并推入调用栈执行。</li>
<li>渲染更新（如果有的话）。</li>
<li>重复循环。</li>
</ol>
<h3 id="事件的优先级"><a href="#事件的优先级" class="headerlink" title="事件的优先级"></a>事件的优先级</h3><p>事实上，将事件笼统地分为 macroTask（宏任务） 和 microTask（微任务）是一种不严谨的认知。规范中仅定义了 Task</p>
<blockquote>
<p>A task is anything scheduled to be run by the standard mechanisms such as initially starting to execute a script, asynchronously dispatching an event, and so forth. Other than by using events, you can enqueue a task by using setTimeout() or setInterval().</p>
</blockquote>
<p>HTML 规范定义了 microTask（微任务），而 <em>The microtask queue is not a task queue.</em><br>换句话说，所有非 microTask 的事件都是 task，即平常说的 macroTask（宏任务）。但这个 macroTask 在官方定义里名为 <strong>task</strong>。</p>
<h4 id="那-task-队列里的事件的优先级是怎么样的呢？"><a href="#那-task-队列里的事件的优先级是怎么样的呢？" class="headerlink" title="那 task 队列里的事件的优先级是怎么样的呢？"></a>那 task 队列里的事件的优先级是怎么样的呢？</h4><p>规范里说“A task queue is a set of tasks.”，所以，调用顺序并不是队列的“先进先出”。</p>
<p>每一个事件都有其特定的执行时机，常见的 task 执行顺序是：<br>I&#x2F;O 操作 -&gt; requestAnimationFrame -&gt; timers（setTimeout, setInterval）</p>
<p>每执行一个 task，便会清空 microtask 队列，所以，如果同时存在 microtask，执行顺序是：<br>I&#x2F;O 操作 -&gt; microtasks -&gt; requestAnimationFrame -&gt; timers（setTimeout, setInterval）&#x2F;messageChannel</p>
<p><strong>requestAnimationFrame</strong><br>window.requestAnimationFrame() 方法要求浏览器在下一次重绘之前，调用用户提供的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按钮点击</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() , <span class="string">&quot;:&quot;</span>, <span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与 timers 按顺序执行</span></span><br><span class="line">channel.<span class="property">port2</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello from port2!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// timers</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() , <span class="string">&quot;:&quot;</span>, <span class="string">&quot;timers&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// microtask</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() , <span class="string">&quot;:&quot;</span>, <span class="string">&quot;microtask&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// requestAnimationFrame</span></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() , <span class="string">&quot;:&quot;</span>, <span class="string">&quot;requestAnimationFrame&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在 chrome 执行环境下，上述几个事件的调用顺序无论如何调整，都是</p>
<p>click -&gt; microtask -&gt; requestAnimationFrame -&gt; timers</p>
<p>换句话说，浏览器内部对执行时机进行了优化，保证用户响应能得到最快执行</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP</title>
    <url>/network/network/tcp/</url>
    <content><![CDATA[<span id="more"></span>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝</title>
    <url>/copy/web/deepCopy/</url>
    <content><![CDATA[<p>浅拷贝（Shallow Copy）：拷贝对象的第一层属性，但如果属性是引用类型（如对象、数组），拷贝的只是其引用地址。</p>
<p>深拷贝（Deep Copy）：创建一个新的对象，并递归地复制原对象的所有属性，使得新对象与原对象在内存中完全独立。即修改新对象不会影响原对象。</p>
<span id="more"></span>

<h3 id="深拷贝需要考虑的点"><a href="#深拷贝需要考虑的点" class="headerlink" title="深拷贝需要考虑的点"></a>深拷贝需要考虑的点</h3><ul>
<li>对象嵌套，即对象的属性也是对象。</li>
<li>基本类型。可直接复制，但要注意 new Number(1) 这种对象类型</li>
<li>symbol 类型。symbol 类型是 JS 中的基本类型，它是唯一且不可变的，无法真正“拷贝”，只能创建新的 Symbol。</li>
<li>regex 类型。</li>
<li>函数。JS 中的函数比较复杂，需要考虑普通函数、箭头函数、闭包、原型方法等情况。</li>
<li>循环引用。需要用 Map 存储当前 key&#x2F;value 对象</li>
<li>iterable 类型，如 Set、 Map。</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><strong>浅拷贝</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> copyObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者 ... 展开运算符</span></span><br><span class="line"><span class="keyword">const</span> copyObj = &#123;...obj&#125;</span><br></pre></td></tr></table></figure>

<p>修改 obj.b 中的属性同样会影响 copyObj</p>
<p>对于数组复制：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrCopy = arr.<span class="title function_">slice</span>() || <span class="keyword">const</span> arrCopy = [].<span class="title function_">concat</span>(arr)</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>深拷贝</strong></p>
<p>1.JSON 方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> deepCopy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deepCopy.<span class="property">b</span> === obj.<span class="property">b</span>); <span class="comment">// false（已深拷贝）</span></span><br></pre></td></tr></table></figure>

<p>简单，适用于简单对象。但无法拷贝 function、Symbol、undefined、Date、RegExp、Map、Set 等。且会丢失原型链。</p>
<p>2.structuredClone</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125;, <span class="attr">d</span>: <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#125;;</span><br><span class="line"><span class="keyword">const</span> clonedObj = <span class="variable language_">window</span>.<span class="title function_">structuredClone</span>(obj);</span><br></pre></td></tr></table></figure>

<p>structuredClone() 是现代浏览器提供的 API，支持 对象、数组、Date、RegExp、Map、Set、Blob、File、ArrayBuffer 等。<br>但不能拷贝 function、Symbol、原型链。</p>
<p>注意：structuredClone 拷贝不支持的类型，如 Symbol 时，浏览器会报错。</p>
<blockquote>
<p>node 17 版本以上才支持。</p>
</blockquote>
<ol start="3">
<li>messegeChannel</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;   </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;     </span><br><span class="line">		<span class="keyword">const</span> &#123; port1, port2 &#125; = <span class="keyword">new</span> <span class="title class_">MessageChannel</span>();     </span><br><span class="line">		port2.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> <span class="title function_">resolve</span>(event.<span class="property">data</span>);     </span><br><span class="line">		port1.<span class="title function_">postMessage</span>(obj);   </span><br><span class="line">	&#125;); </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">const</span> obj=&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125;, <span class="attr">d</span>: <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), <span class="attr">d</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>), <span class="attr">e</span>: <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;1&#x27;</span>)&#125;</span><br><span class="line"><span class="title function_">deepClone</span>(obj).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>

<p>messegeChannel 会建立一个消息通道，并通过两端的端口发送消息实现通信。同样也可以实现深拷贝。</p>
<p>类似于 <code>structuredClone</code>，支持 Date、Set、Map 等类型。不支持 symbol、function</p>
<blockquote>
<p>上述提到的 API 都不支持循环引用</p>
</blockquote>
<p>4.Lodash 提供了 cloneDeep，是一个经过优化的深拷贝方法，能完美处理大多数情况。</p>
<p>5.简单实现一个 cloneDeep</p>
<p>列举对不同类型的数据的不同处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cloneRegexp</span> = (<span class="params">reg</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    resource, <span class="comment">// 正则的匹配文本（如 ^12）</span></span><br><span class="line">    flags, <span class="comment">// 正则的修饰符（如 g）</span></span><br><span class="line">    lastIndex <span class="comment">// 用于指定下次匹配从什么时候开始</span></span><br><span class="line">  &#125; = reg;</span><br><span class="line">  <span class="keyword">const</span> _reg = <span class="keyword">new</span> <span class="title class_">Regexp</span>(resource, flags);</span><br><span class="line">  _reg.<span class="property">lastIndex</span> = lastIndex;</span><br><span class="line">  <span class="keyword">return</span> _reg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似 Number(1) 的对象基本类型</span></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params">obj.valueOf()</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Symbol 的描述（ES2019+）</span></span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(sym1.<span class="property">description</span>);  <span class="comment">// 创建一个新的 Symbol，但不是 sym1 的拷贝。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set, map 需要分别处理</span></span><br><span class="line">obj.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, key</span>) =&gt;</span> &#123;</span><br><span class="line">    _obj.<span class="title function_">add</span>(<span class="title function_">deepClone</span>(val, map));</span><br><span class="line">&#125;);</span><br><span class="line">obj.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, key</span>) =&gt;</span> &#123;</span><br><span class="line">    _obj.<span class="title function_">set</span>(key, <span class="title function_">deepClone</span>(val, map));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环引用需要 map 存储每一个属性值</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数</title>
    <url>/world/math/linearAlgebra/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
</search>
